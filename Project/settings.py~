# Django settings for Project project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

GOOGLE_ANALYTICS_MODEL = True
LOGIN_REDIRECT_URL='/'

ACCOUNT_ACTIVATION_DAYS=7
#MAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
# Host for sending e-mail.
#EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'
# Port for sending e-mail.
#EMAIL_PORT = 25
# Optional SMTP authentication information for EMAIL_HOST.
#EMAIL_HOST_USER = 'AKIAIG54CO2QVDWHPMIA'
#EMAIL_HOST_PASSWORD = 'Ao+ckP4XhVykZjsJZGVV1xXyfu39MEcjG90RWlOjRUp1'
#EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = 'admin@thekindnesspledge.org'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'admin@thekindnesspledge.org'
EMAIL_HOST_PASSWORD = 'Zelunjo1'
EMAIL_SUBJECT_PREFIX = 'The Kindness Pledge'
EMAIL_USE_TLS = True 
#EMAIL_PORT = "465"  #this line may not be required.
EMAIL_PORT = 587 

FACEBOOK_APP_ID = '577325912283123'
FACEBOOK_SECRET_KEY = '2a8f012939288e9ffdea1dc353312e6a'
FACEBOOK_EXTENDED_PERMISSIONS = ['email']
#FACEBOOK_REQUEST_PERMISSIONS = 'email'

TWITTER_CONSUMER_KEY = 'J8UTsAIoGDlLHfKKy89rg'
TWITTER_CONSUMER_SECRET = 'yep4Rl9NEQsTjCKGjxfA6YE31JnMgxQIXTa1K3nYs' 

SOCIAL_AUTH_SESSION_EXPIRATION = False


ALLOWED_INCLUDE_ROOTS = ('/home/bitnami/apps/django/django_projects/Project/templates/', )
ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'djangostack',
        'HOST': '/opt/bitnami/postgresql',
        'PORT': '5432',
        'USER': 'bitnami',
        'PASSWORD': '8c4c58e151'
    }
}

EXAMPLE_DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}


# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = '/home/bitnami/apps/django/django_projects/Project/media'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = '/home/bitnami/apps/django/django_projects/Project/static'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.csrf',
)

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
    'dajaxice.finders.DajaxiceFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '(t)ntr6@k3jp6j-6i6hcl=g*q#9=)yx*83yq2#t1d+-i58%e14'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'Project.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'Project.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    '/home/bitnami/apps/django/django_projects/Project/templates',
)

AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
        'socialregistration.contrib.facebook.auth.FacebookAuth',
)



INSTALLED_APPS = (
    'filebrowser',
    'dajaxice',
    'tinymce',
    'profiles',
    'socialregistration',
    'socialregistration.contrib.facebook',
    'django.contrib.humanize',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_admin_bootstrapped',
    #'grappelli',
    'django.contrib.admin',
    # 'django.contrib.admindocs',
    'kindnesspledge',
    'Project',
    'registration',
    'oauth2',
    'google_analytics',
)



# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}
